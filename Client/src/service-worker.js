/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin || url.pathname.includes('http'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// // This allows the web app to trigger skipWaiting via
// // registration.waiting.postMessage({type: 'SKIP_WAITING'})
// self.addEventListener('message', (event) => {
//   if (event.data && event.data.type === 'SKIP_WAITING') {
//     self.skipWaiting();
//   }
// });

self.addEventListener('fetch', (e) => {
  console.log(e.request)
  e.respondWith(
    caches.match(e.request).then((r) => {
          console.log('[Service Worker] Fetching resource: '+e.request.url);
      return r || fetch(e.request).then((response) => {
                return caches.open('fetch').then((cache) => {
          console.log('[Service Worker] Caching new resource: '+e.request.url);
          cache.put(e.request, response.clone());
          return response;
        });
      });
    })
  );
  
});

self.addEventListener('fetch', async (event) => {
  if (event.request.method === 'POST') {
    // Respond with cached data and update from network in the background.
    event.respondWith(StaleWhileRevalidate(event));
  }
});

// Any other custom service worker logic can go here.
const exclude = [/query UserCart/,  /query Identity/];


function handleGraphQL(e) {
  // ...
  // ...
  const generateQueryId = e.request
  .clone()
  .json()
  .then(({ query, variables }) => {
    // skip blacklisted queries.
    if (exclude.some((r) => r.test(query))) {
      return null;
    }
    // ...
  });
  const fromNetwork = fetch(e.request);
  e.respondWith(
    (async () => {
      // ...
    })()
  );
  e.waitUntil(
    (async () => {
      // once the network response finishes, clone it!
      const res = await fromNetwork.then((res) => res.clone());
      // Get the query id
      const queryId = await generateQueryId;
      if (!queryId) {
        return;
      }
      // Cache the response.
      const cache = await caches.open(QUERY_CACHE_KEY);
      await cache.put(e.request, res);
    })()
  );
}
async function fromCache(request) {
  const cache = await caches.open(QUERY_CACHE_KEY);
  const matching = await cache.match(request);
  return matching;
}

function hash(str) {
  let h, i, l;
  for (h = 5381 | 0, i = 0, l = str.length | 0; i < l; i++) {
    h = (h << 5) + h + str.charCodeAt(i);
  }
  return h >>> 0;
}

 const GRAPHQL_URL = 'http://localhost:8080/graph';

const QUERY_CACHE_KEY = 'CACHE_V_0';

self.addEventListener('fetch', (e) => {
  if (isGraphql(e.request)) {
    handleGraphQL(e);
  }
});
function isGraphql(request) {
  // Change this to whatever that works for you.
  return request.url.startsWith('http://example.com/graphql');
}
 


